//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "BasicPage.xaml.h"
#include "App.xaml.h"
#include "ItemsPage.xaml.h"
#include "SplitPage.xaml.h"

#include "BasicPage.g.hpp"
#include "App.g.hpp"
#include "ItemsPage.g.hpp"
#include "SplitPage.g.hpp"


using namespace Platform;
using namespace Platform::Collections;
using namespace Windows::UI::Xaml::Markup;
using namespace XamlTypeInfo::InfoProvider;
using namespace Windows::Foundation;

Vector<IXamlMetadataProvider^>^ XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        _otherProviders = ref new Vector<IXamlMetadataProvider^>();
    }
    return _otherProviders;
}

IXamlType^ XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForName(String^ typeName)
{
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(typeName);
        if(xamlType != nullptr)
        {
            return xamlType;
        }
    }
    return nullptr;
}

IXamlType^ XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForType(Windows::UI::Xaml::Interop::TypeName t)
{
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(t);
        if(xamlType != nullptr)
        {
            return xamlType;
        }
    }
    return nullptr;
}

IXamlType^ XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(String^ typeName)
{
    if (typeName == L"Windows.UI.Xaml.Controls.Page")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Controls.UserControl")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Object")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"String")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Media.ImageSource")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Labwork1UI.Common.LayoutAwarePage")
    {
        XamlUserType^ userType = ref new XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"DefaultViewModel");
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IObservableMap<String, Object>")
    {
        XamlUserType^ userType = ref new XamlUserType(this, typeName, nullptr);
        userType->KindOfType = Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->DictionaryAdd =
            [](Object^ instance, Object^ key, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IObservableMap<Platform::String^, Platform::Object^>^)instance;
                auto newKey = (Platform::String^)key;
                auto newItem = (Platform::Object^)item;
                collection->Insert(newKey, newItem);
            };
        return userType;
    }

    if (typeName == L"Labwork1UI.BasicPage")
    {
        XamlUserType^ userType = ref new XamlUserType(this, typeName, GetXamlTypeByName(L"Labwork1UI.Common.LayoutAwarePage"));
        userType->KindOfType = Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new Labwork1UI::BasicPage(); 
            };
        return userType;
    }

    if (typeName == L"Labwork1UI.ItemsPage")
    {
        XamlUserType^ userType = ref new XamlUserType(this, typeName, GetXamlTypeByName(L"Labwork1UI.Common.LayoutAwarePage"));
        userType->KindOfType = Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new Labwork1UI::ItemsPage(); 
            };
        return userType;
    }

    if (typeName == L"Labwork1UI.SplitPage")
    {
        XamlUserType^ userType = ref new XamlUserType(this, typeName, GetXamlTypeByName(L"Labwork1UI.Common.LayoutAwarePage"));
        userType->KindOfType = Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new Labwork1UI::SplitPage(); 
            };
        return userType;
    }

    if (typeName == L"Labwork1UI.Data.SampleDataCommon")
    {
        XamlUserType^ userType = ref new XamlUserType(this, typeName, GetXamlTypeByName(L"Labwork1UI.Common.BindableBase"));
        userType->KindOfType = Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Description");
        userType->AddMemberName(L"Image");
        userType->AddMemberName(L"Subtitle");
        userType->AddMemberName(L"Title");
        userType->AddMemberName(L"UniqueId");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Labwork1UI.Common.BindableBase")
    {
        XamlUserType^ userType = ref new XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = Windows::UI::Xaml::Interop::TypeKind::Custom;
        return userType;
    }

    if (typeName == L"Labwork1UI.Data.SampleDataItem")
    {
        XamlUserType^ userType = ref new XamlUserType(this, typeName, GetXamlTypeByName(L"Labwork1UI.Data.SampleDataCommon"));
        userType->KindOfType = Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Group");
        userType->AddMemberName(L"Content");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Labwork1UI.Data.SampleDataGroup")
    {
        XamlUserType^ userType = ref new XamlUserType(this, typeName, GetXamlTypeByName(L"Labwork1UI.Data.SampleDataCommon"));
        userType->KindOfType = Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"TopItems");
        userType->AddMemberName(L"Items");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IVector<Labwork1UI.Data.SampleDataItem>")
    {
        XamlUserType^ userType = ref new XamlUserType(this, typeName, nullptr);
        userType->KindOfType = Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IVector<Labwork1UI::Data::SampleDataItem^>^)instance;
                auto newItem = (Labwork1UI::Data::SampleDataItem^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IObservableVector<Labwork1UI.Data.SampleDataItem>")
    {
        XamlUserType^ userType = ref new XamlUserType(this, typeName, nullptr);
        userType->KindOfType = Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IObservableVector<Labwork1UI::Data::SampleDataItem^>^)instance;
                auto newItem = (Labwork1UI::Data::SampleDataItem^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    if (typeName == L"Labwork1UI.Data.SampleDataSource")
    {
        XamlUserType^ userType = ref new XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new Labwork1UI::Data::SampleDataSource(); 
            };
        userType->AddMemberName(L"AllGroups");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IObservableVector<Labwork1UI.Data.SampleDataGroup>")
    {
        XamlUserType^ userType = ref new XamlUserType(this, typeName, nullptr);
        userType->KindOfType = Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IObservableVector<Labwork1UI::Data::SampleDataGroup^>^)instance;
                auto newItem = (Labwork1UI::Data::SampleDataGroup^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    return nullptr;
}

IXamlMember^ XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(String^ longMemberName)
{
    if (longMemberName == L"Labwork1UI.Common.LayoutAwarePage.DefaultViewModel")
    {
        XamlMember^ xamlMember = ref new XamlMember(this, L"DefaultViewModel", L"Windows.Foundation.Collections.IObservableMap<String, Object>");
        xamlMember->SetIsDependencyProperty();
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (Labwork1UI::Common::LayoutAwarePage^)instance;
                return that->DefaultViewModel;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (Labwork1UI::Common::LayoutAwarePage^)instance;
                that->DefaultViewModel = (Windows::Foundation::Collections::IObservableMap<Platform::String^, Platform::Object^>^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Labwork1UI.Data.SampleDataCommon.Description")
    {
        XamlMember^ xamlMember = ref new XamlMember(this, L"Description", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (Labwork1UI::Data::SampleDataCommon^)instance;
                return that->Description;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (Labwork1UI::Data::SampleDataCommon^)instance;
                that->Description = (Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Labwork1UI.Data.SampleDataCommon.Image")
    {
        XamlMember^ xamlMember = ref new XamlMember(this, L"Image", L"Windows.UI.Xaml.Media.ImageSource");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (Labwork1UI::Data::SampleDataCommon^)instance;
                return that->Image;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (Labwork1UI::Data::SampleDataCommon^)instance;
                that->Image = (Windows::UI::Xaml::Media::ImageSource^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Labwork1UI.Data.SampleDataCommon.Subtitle")
    {
        XamlMember^ xamlMember = ref new XamlMember(this, L"Subtitle", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (Labwork1UI::Data::SampleDataCommon^)instance;
                return that->Subtitle;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (Labwork1UI::Data::SampleDataCommon^)instance;
                that->Subtitle = (Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Labwork1UI.Data.SampleDataCommon.Title")
    {
        XamlMember^ xamlMember = ref new XamlMember(this, L"Title", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (Labwork1UI::Data::SampleDataCommon^)instance;
                return that->Title;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (Labwork1UI::Data::SampleDataCommon^)instance;
                that->Title = (Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Labwork1UI.Data.SampleDataCommon.UniqueId")
    {
        XamlMember^ xamlMember = ref new XamlMember(this, L"UniqueId", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (Labwork1UI::Data::SampleDataCommon^)instance;
                return that->UniqueId;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (Labwork1UI::Data::SampleDataCommon^)instance;
                that->UniqueId = (Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Labwork1UI.Data.SampleDataItem.Group")
    {
        XamlMember^ xamlMember = ref new XamlMember(this, L"Group", L"Labwork1UI.Data.SampleDataGroup");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (Labwork1UI::Data::SampleDataItem^)instance;
                return that->Group;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (Labwork1UI::Data::SampleDataItem^)instance;
                that->Group = (Labwork1UI::Data::SampleDataGroup^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Labwork1UI.Data.SampleDataItem.Content")
    {
        XamlMember^ xamlMember = ref new XamlMember(this, L"Content", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (Labwork1UI::Data::SampleDataItem^)instance;
                return that->Content;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (Labwork1UI::Data::SampleDataItem^)instance;
                that->Content = (Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Labwork1UI.Data.SampleDataGroup.TopItems")
    {
        XamlMember^ xamlMember = ref new XamlMember(this, L"TopItems", L"Windows.Foundation.Collections.IVector<Labwork1UI.Data.SampleDataItem>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (Labwork1UI::Data::SampleDataGroup^)instance;
                return that->TopItems;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Labwork1UI.Data.SampleDataGroup.Items")
    {
        XamlMember^ xamlMember = ref new XamlMember(this, L"Items", L"Windows.Foundation.Collections.IObservableVector<Labwork1UI.Data.SampleDataItem>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (Labwork1UI::Data::SampleDataGroup^)instance;
                return that->Items;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Labwork1UI.Data.SampleDataSource.AllGroups")
    {
        XamlMember^ xamlMember = ref new XamlMember(this, L"AllGroups", L"Windows.Foundation.Collections.IObservableVector<Labwork1UI.Data.SampleDataGroup>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (Labwork1UI::Data::SampleDataSource^)instance;
                return that->AllGroups;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    return nullptr;
}

